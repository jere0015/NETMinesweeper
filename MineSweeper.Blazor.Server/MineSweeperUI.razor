@using Microsoft.AspNetCore.Hosting;
@using Microsoft.Extensions.Hosting;
@inject ILogger<MineSweeperUI> _logger
@inject IGameFactory _gameFactory
@inject IWebHostEnvironment _env

<h3>MineSweeper</h3>
<button @onclick="@StartGame">Start game</button>
@if (game?.State != null)
{
	switch (game.State.Stage)
	{
		case Stage.Playing:
			<table>
				@for (int y = 0; y < game.State.Board.Height; y++)
				{
					<tr>
						@for (var x = 0; x < game.State.Board.Width; x++)
						{
							var tile = game.State.Board.Tiles.First(_ => _.X == x && _.Y == y);

							//NOTE: https://stackoverflow.com/a/54813295
							int _x = x;
							int _y = y;

							<td @onclick="()=>RevealTile(_x, _y)" @oncontextmenu="()=>PlaceFlag(_x, _y)"
			@oncontextmenu:preventDefault="true">

								@if (tile.IsRevealed)
								{
									if (tile.IsMine)
									{
										<div>X,</div>
									}
									else
									{
										<div>@tile.Neighbourghs(game.State.Board).Where(_ => _.IsMine).Count()</div>
									}
								}
								else // Tile not revealed
								{
									if (tile.IsFlagged)
									{
										<div>F,</div>
									}
									else
									{
										<div>?,</div>
									}
								}
							</td>
						}
					</tr>
				}
			</table>
			break;

		case Stage.Lost:
			<div>You lost!</div>
			break;

		case Stage.Won:
			<div>You win!</div>
			break;
	}
}

@if (_env.IsDevelopment())
{
	<table>
		@for (int y = 0; y < game?.State.Board.Height; y++)
		{
			<tr>
				@for (var x = 0; x < game.State.Board.Width; x++)
				{
					var tile = game.State.Board.Tiles.First(_ => _.X == x && _.Y == y);

					if (tile.IsMine)
					{
						<td>X</td>
					}
					else
					{
						<td>@tile.Neighbourghs(game.State.Board).Where(_ => _.IsMine).Count()</td>
					}
				}
			</tr>
		}
	</table>
}


@code {

	IGame? game = null;

	Config config = new Config(5, 5, 0, Difficulity.Easy);

	// Handlerss
	void StartGame()
	{
		game = _gameFactory.Create(config);
	}

	void RevealTile(int x, int y)
	{
		if (game?.State.Stage == Stage.Playing)
		{
			_logger.LogInformation($"Revealing tile at {x} {y}");

			game.RevealTile(x, y);

			this.StateHasChanged();
		}
	}

	void PlaceFlag(int x, int y)
	{
		if (game?.State.Stage == Stage.Playing)
		{
			_logger.LogInformation($"Placing flag at {x} {y}");

			game.ToggleFlag(x, y);

			this.StateHasChanged();
		}
	}
}
