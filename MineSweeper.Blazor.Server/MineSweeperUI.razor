@inject ILogger<MineSweeperUI> logger
@inject IGameFactory gameFactory
@inject IConfigFactory configFactory

<h3>MineSweeper</h3>
<button @onclick="@StartGame">Start game</button>
@if (game.State != null)
{
	switch (game.State.Stage)
	{
		case Stage.Active:
			<table>
				@for (var x = 0; x < boardWidth; x++)
				{
					<tr>
						@for (int y = 0; y < boardHeight; y++)
						{
							var tile = game.State.Board.GetTile(x, y);

							//NOTE: https://stackoverflow.com/a/54813295
							int _x = x;
							int _y = y;

							<td @onclick="()=>RevealTile(_x, _y)" @oncontextmenu="()=>PlaceFlag(_x, _y)"
								@oncontextmenu:preventDefault="true">
								
								@if (tile.IsRevealed)
								{
									if (tile.IsMine)
									{
										<div>X</div>
									}
									else
									{
										<div>@game.State.Board.GetNeighbourghMineCount(_x, _y)</div>
									}
								}
								else // Tile not revealed
								{
									if (tile.IsFlagged)
									{
										<div>F</div>
									}
									else
									{
										<div>?</div>
									}
								}
							</td>
						}
					</tr>
				}
			</table>
			break;

		case Stage.Lost:
			<div>You lost!</div>
			break;

		case Stage.Won:
			<div>You win!</div>
			break;
	}
}

@code {
	#pragma warning disable CS8618
	// Game instance
	IGame game;
#pragma warning restore CS8618

	// Config variables
	int boardWidth = 5;
	int boardHeight = 5;
	int seed = 0;
	Difficulity difficulity = Difficulity.Easy;

	// Constructor
	protected override void OnInitialized()
	{
		game = gameFactory.Create();
	}

	// Handlers
	void StartGame()
	{
		var config = configFactory.Create(boardWidth, boardHeight, seed, difficulity);

		game.StartGame(config);
	}

	void RevealTile(int x, int y)
	{
		if (game.State?.Stage != Stage.Lost)
		{
			logger.LogInformation($"Revealing tile at {x} {y}");

			game.RevealTile(x, y);
		}
	}

	void PlaceFlag(int x, int y)
	{
		if (game.State?.Stage != Stage.Lost)
		{
			logger.LogInformation($"Placing flag at {x} {y}");

			game.ToggleFlag(x, y);
		}
	}
}
